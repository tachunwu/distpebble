// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TxnRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxnRequestMultiError, or
// nil if none found.
func (m *TxnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxnRequestValidationError{
				field:  "Txn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TxnRequestMultiError(errors)
	}

	return nil
}

// TxnRequestMultiError is an error wrapping multiple validation errors
// returned by TxnRequest.ValidateAll() if the designated constraints aren't met.
type TxnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxnRequestMultiError) AllErrors() []error { return m }

// TxnRequestValidationError is the validation error returned by
// TxnRequest.Validate if the designated constraints aren't met.
type TxnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxnRequestValidationError) ErrorName() string { return "TxnRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxnRequestValidationError{}

// Validate checks the field values on TxnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxnResponseMultiError, or
// nil if none found.
func (m *TxnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TxnResponseMultiError(errors)
	}

	return nil
}

// TxnResponseMultiError is an error wrapping multiple validation errors
// returned by TxnResponse.ValidateAll() if the designated constraints aren't met.
type TxnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxnResponseMultiError) AllErrors() []error { return m }

// TxnResponseValidationError is the validation error returned by
// TxnResponse.Validate if the designated constraints aren't met.
type TxnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxnResponseValidationError) ErrorName() string { return "TxnResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxnResponseValidationError{}

// Validate checks the field values on Txn with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Txn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Txn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TxnMultiError, or nil if none found.
func (m *Txn) ValidateAll() error {
	return m.validate(true)
}

func (m *Txn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for TxnType

	for idx, item := range m.GetReadSet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("ReadSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("ReadSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxnValidationError{
					field:  fmt.Sprintf("ReadSet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWriteSet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("WriteSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("WriteSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxnValidationError{
					field:  fmt.Sprintf("WriteSet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReadWriteSet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("ReadWriteSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TxnValidationError{
						field:  fmt.Sprintf("ReadWriteSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TxnValidationError{
					field:  fmt.Sprintf("ReadWriteSet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TxnMultiError(errors)
	}

	return nil
}

// TxnMultiError is an error wrapping multiple validation errors returned by
// Txn.ValidateAll() if the designated constraints aren't met.
type TxnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxnMultiError) AllErrors() []error { return m }

// TxnValidationError is the validation error returned by Txn.Validate if the
// designated constraints aren't met.
type TxnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxnValidationError) ErrorName() string { return "TxnValidationError" }

// Error satisfies the builtin error interface
func (e TxnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxnValidationError{}

// Validate checks the field values on Get with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Get) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Get with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetMultiError, or nil if none found.
func (m *Get) ValidateAll() error {
	return m.validate(true)
}

func (m *Get) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMultiError(errors)
	}

	return nil
}

// GetMultiError is an error wrapping multiple validation errors returned by
// Get.ValidateAll() if the designated constraints aren't met.
type GetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMultiError) AllErrors() []error { return m }

// GetValidationError is the validation error returned by Get.Validate if the
// designated constraints aren't met.
type GetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValidationError) ErrorName() string { return "GetValidationError" }

// Error satisfies the builtin error interface
func (e GetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValidationError{}

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Set with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetMultiError, or nil if none found.
func (m *Set) ValidateAll() error {
	return m.validate(true)
}

func (m *Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Valie

	if len(errors) > 0 {
		return SetMultiError(errors)
	}

	return nil
}

// SetMultiError is an error wrapping multiple validation errors returned by
// Set.ValidateAll() if the designated constraints aren't met.
type SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMultiError) AllErrors() []error { return m }

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Delete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeleteMultiError, or nil if none found.
func (m *Delete) ValidateAll() error {
	return m.validate(true)
}

func (m *Delete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteMultiError(errors)
	}

	return nil
}

// DeleteMultiError is an error wrapping multiple validation errors returned by
// Delete.ValidateAll() if the designated constraints aren't met.
type DeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMultiError) AllErrors() []error { return m }

// DeleteValidationError is the validation error returned by Delete.Validate if
// the designated constraints aren't met.
type DeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValidationError) ErrorName() string { return "DeleteValidationError" }

// Error satisfies the builtin error interface
func (e DeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValidationError{}

// Validate checks the field values on Scan with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Scan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scan with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScanMultiError, or nil if none found.
func (m *Scan) ValidateAll() error {
	return m.validate(true)
}

func (m *Scan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "StartKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "StartKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScanValidationError{
				field:  "StartKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "EndKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "EndKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScanValidationError{
				field:  "EndKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScanMultiError(errors)
	}

	return nil
}

// ScanMultiError is an error wrapping multiple validation errors returned by
// Scan.ValidateAll() if the designated constraints aren't met.
type ScanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanMultiError) AllErrors() []error { return m }

// ScanValidationError is the validation error returned by Scan.Validate if the
// designated constraints aren't met.
type ScanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanValidationError) ErrorName() string { return "ScanValidationError" }

// Error satisfies the builtin error interface
func (e ScanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanValidationError{}

// Validate checks the field values on KeyEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyEntryMultiError, or nil
// if none found.
func (m *KeyEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Master

	// no validation rules for Counter

	if len(errors) > 0 {
		return KeyEntryMultiError(errors)
	}

	return nil
}

// KeyEntryMultiError is an error wrapping multiple validation errors returned
// by KeyEntry.ValidateAll() if the designated constraints aren't met.
type KeyEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyEntryMultiError) AllErrors() []error { return m }

// KeyEntryValidationError is the validation error returned by
// KeyEntry.Validate if the designated constraints aren't met.
type KeyEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyEntryValidationError) ErrorName() string { return "KeyEntryValidationError" }

// Error satisfies the builtin error interface
func (e KeyEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyEntryValidationError{}

// Validate checks the field values on LookupMasterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookupMasterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupMasterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupMasterRequestMultiError, or nil if none found.
func (m *LookupMasterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupMasterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	if len(errors) > 0 {
		return LookupMasterRequestMultiError(errors)
	}

	return nil
}

// LookupMasterRequestMultiError is an error wrapping multiple validation
// errors returned by LookupMasterRequest.ValidateAll() if the designated
// constraints aren't met.
type LookupMasterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupMasterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupMasterRequestMultiError) AllErrors() []error { return m }

// LookupMasterRequestValidationError is the validation error returned by
// LookupMasterRequest.Validate if the designated constraints aren't met.
type LookupMasterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupMasterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupMasterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupMasterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupMasterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupMasterRequestValidationError) ErrorName() string {
	return "LookupMasterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookupMasterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupMasterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupMasterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupMasterRequestValidationError{}

// Validate checks the field values on LookupMasterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookupMasterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupMasterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupMasterResponseMultiError, or nil if none found.
func (m *LookupMasterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupMasterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	for idx, item := range m.GetKeyEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LookupMasterResponseValidationError{
						field:  fmt.Sprintf("KeyEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LookupMasterResponseValidationError{
						field:  fmt.Sprintf("KeyEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LookupMasterResponseValidationError{
					field:  fmt.Sprintf("KeyEntries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LookupMasterResponseMultiError(errors)
	}

	return nil
}

// LookupMasterResponseMultiError is an error wrapping multiple validation
// errors returned by LookupMasterResponse.ValidateAll() if the designated
// constraints aren't met.
type LookupMasterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupMasterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupMasterResponseMultiError) AllErrors() []error { return m }

// LookupMasterResponseValidationError is the validation error returned by
// LookupMasterResponse.Validate if the designated constraints aren't met.
type LookupMasterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupMasterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupMasterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupMasterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupMasterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupMasterResponseValidationError) ErrorName() string {
	return "LookupMasterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookupMasterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupMasterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupMasterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupMasterResponseValidationError{}

// Validate checks the field values on MachineInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MachineInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MachineInfoMultiError, or
// nil if none found.
func (m *MachineInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Replica

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return MachineInfoMultiError(errors)
	}

	return nil
}

// MachineInfoMultiError is an error wrapping multiple validation errors
// returned by MachineInfo.ValidateAll() if the designated constraints aren't met.
type MachineInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineInfoMultiError) AllErrors() []error { return m }

// MachineInfoValidationError is the validation error returned by
// MachineInfo.Validate if the designated constraints aren't met.
type MachineInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineInfoValidationError) ErrorName() string { return "MachineInfoValidationError" }

// Error satisfies the builtin error interface
func (e MachineInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineInfoValidationError{}

// Validate checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterInfoMultiError, or
// nil if none found.
func (m *ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMachines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  fmt.Sprintf("Machines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterInfoValidationError{
						field:  fmt.Sprintf("Machines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterInfoValidationError{
					field:  fmt.Sprintf("Machines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterInfoMultiError(errors)
	}

	return nil
}

// ClusterInfoMultiError is an error wrapping multiple validation errors
// returned by ClusterInfo.ValidateAll() if the designated constraints aren't met.
type ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterInfoMultiError) AllErrors() []error { return m }

// ClusterInfoValidationError is the validation error returned by
// ClusterInfo.Validate if the designated constraints aren't met.
type ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterInfoValidationError) ErrorName() string { return "ClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterInfoValidationError{}
