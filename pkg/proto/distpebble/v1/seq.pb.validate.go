// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: distpebble/v1/seq.proto

package distpebblev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTxnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTxnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTxnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTxnRequestMultiError, or nil if none found.
func (m *CreateTxnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTxnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTxnRequestValidationError{
				field:  "Txn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTxnRequestMultiError(errors)
	}

	return nil
}

// CreateTxnRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTxnRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTxnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTxnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTxnRequestMultiError) AllErrors() []error { return m }

// CreateTxnRequestValidationError is the validation error returned by
// CreateTxnRequest.Validate if the designated constraints aren't met.
type CreateTxnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTxnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTxnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTxnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTxnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTxnRequestValidationError) ErrorName() string { return "CreateTxnRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateTxnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTxnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTxnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTxnRequestValidationError{}

// Validate checks the field values on CreateTxnResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTxnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTxnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTxnResponseMultiError, or nil if none found.
func (m *CreateTxnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTxnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTxnResponseMultiError(errors)
	}

	return nil
}

// CreateTxnResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTxnResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTxnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTxnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTxnResponseMultiError) AllErrors() []error { return m }

// CreateTxnResponseValidationError is the validation error returned by
// CreateTxnResponse.Validate if the designated constraints aren't met.
type CreateTxnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTxnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTxnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTxnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTxnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTxnResponseValidationError) ErrorName() string {
	return "CreateTxnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTxnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTxnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTxnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTxnResponseValidationError{}

// Validate checks the field values on GetBatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBatchRequestMultiError, or nil if none found.
func (m *GetBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBatchRequestMultiError(errors)
	}

	return nil
}

// GetBatchRequestMultiError is an error wrapping multiple validation errors
// returned by GetBatchRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBatchRequestMultiError) AllErrors() []error { return m }

// GetBatchRequestValidationError is the validation error returned by
// GetBatchRequest.Validate if the designated constraints aren't met.
type GetBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchRequestValidationError) ErrorName() string { return "GetBatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchRequestValidationError{}

// Validate checks the field values on GetBatchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBatchResponseMultiError, or nil if none found.
func (m *GetBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTxns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBatchResponseValidationError{
						field:  fmt.Sprintf("Txns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBatchResponseValidationError{
						field:  fmt.Sprintf("Txns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBatchResponseValidationError{
					field:  fmt.Sprintf("Txns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBatchResponseMultiError(errors)
	}

	return nil
}

// GetBatchResponseMultiError is an error wrapping multiple validation errors
// returned by GetBatchResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBatchResponseMultiError) AllErrors() []error { return m }

// GetBatchResponseValidationError is the validation error returned by
// GetBatchResponse.Validate if the designated constraints aren't met.
type GetBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchResponseValidationError) ErrorName() string { return "GetBatchResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchResponseValidationError{}

// Validate checks the field values on Get with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Get) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Get with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetMultiError, or nil if none found.
func (m *Get) ValidateAll() error {
	return m.validate(true)
}

func (m *Get) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMultiError(errors)
	}

	return nil
}

// GetMultiError is an error wrapping multiple validation errors returned by
// Get.ValidateAll() if the designated constraints aren't met.
type GetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMultiError) AllErrors() []error { return m }

// GetValidationError is the validation error returned by Get.Validate if the
// designated constraints aren't met.
type GetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValidationError) ErrorName() string { return "GetValidationError" }

// Error satisfies the builtin error interface
func (e GetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValidationError{}

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Set with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetMultiError, or nil if none found.
func (m *Set) ValidateAll() error {
	return m.validate(true)
}

func (m *Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Valie

	if len(errors) > 0 {
		return SetMultiError(errors)
	}

	return nil
}

// SetMultiError is an error wrapping multiple validation errors returned by
// Set.ValidateAll() if the designated constraints aren't met.
type SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMultiError) AllErrors() []error { return m }

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Delete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Delete with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeleteMultiError, or nil if none found.
func (m *Delete) ValidateAll() error {
	return m.validate(true)
}

func (m *Delete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteMultiError(errors)
	}

	return nil
}

// DeleteMultiError is an error wrapping multiple validation errors returned by
// Delete.ValidateAll() if the designated constraints aren't met.
type DeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMultiError) AllErrors() []error { return m }

// DeleteValidationError is the validation error returned by Delete.Validate if
// the designated constraints aren't met.
type DeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValidationError) ErrorName() string { return "DeleteValidationError" }

// Error satisfies the builtin error interface
func (e DeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValidationError{}

// Validate checks the field values on Scan with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Scan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scan with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScanMultiError, or nil if none found.
func (m *Scan) ValidateAll() error {
	return m.validate(true)
}

func (m *Scan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "StartKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "StartKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScanValidationError{
				field:  "StartKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "EndKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScanValidationError{
					field:  "EndKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScanValidationError{
				field:  "EndKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScanMultiError(errors)
	}

	return nil
}

// ScanMultiError is an error wrapping multiple validation errors returned by
// Scan.ValidateAll() if the designated constraints aren't met.
type ScanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanMultiError) AllErrors() []error { return m }

// ScanValidationError is the validation error returned by Scan.Validate if the
// designated constraints aren't met.
type ScanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanValidationError) ErrorName() string { return "ScanValidationError" }

// Error satisfies the builtin error interface
func (e ScanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanValidationError{}

// Validate checks the field values on GetGlobalOrderedTxnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalOrderedTxnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalOrderedTxnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGlobalOrderedTxnRequestMultiError, or nil if none found.
func (m *GetGlobalOrderedTxnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalOrderedTxnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGlobalOrderedTxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGlobalOrderedTxnRequestValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGlobalOrderedTxnRequestValidationError{
				field:  "Txn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGlobalOrderedTxnRequestMultiError(errors)
	}

	return nil
}

// GetGlobalOrderedTxnRequestMultiError is an error wrapping multiple
// validation errors returned by GetGlobalOrderedTxnRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGlobalOrderedTxnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalOrderedTxnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalOrderedTxnRequestMultiError) AllErrors() []error { return m }

// GetGlobalOrderedTxnRequestValidationError is the validation error returned
// by GetGlobalOrderedTxnRequest.Validate if the designated constraints aren't met.
type GetGlobalOrderedTxnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalOrderedTxnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalOrderedTxnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalOrderedTxnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalOrderedTxnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalOrderedTxnRequestValidationError) ErrorName() string {
	return "GetGlobalOrderedTxnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalOrderedTxnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalOrderedTxnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalOrderedTxnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalOrderedTxnRequestValidationError{}

// Validate checks the field values on GetGlobalOrderedTxnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalOrderedTxnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalOrderedTxnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGlobalOrderedTxnResponseMultiError, or nil if none found.
func (m *GetGlobalOrderedTxnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalOrderedTxnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGlobalOrderedTxnResponseValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGlobalOrderedTxnResponseValidationError{
					field:  "Txn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGlobalOrderedTxnResponseValidationError{
				field:  "Txn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGlobalOrderedTxnResponseMultiError(errors)
	}

	return nil
}

// GetGlobalOrderedTxnResponseMultiError is an error wrapping multiple
// validation errors returned by GetGlobalOrderedTxnResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGlobalOrderedTxnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalOrderedTxnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalOrderedTxnResponseMultiError) AllErrors() []error { return m }

// GetGlobalOrderedTxnResponseValidationError is the validation error returned
// by GetGlobalOrderedTxnResponse.Validate if the designated constraints
// aren't met.
type GetGlobalOrderedTxnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalOrderedTxnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalOrderedTxnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalOrderedTxnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalOrderedTxnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalOrderedTxnResponseValidationError) ErrorName() string {
	return "GetGlobalOrderedTxnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalOrderedTxnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalOrderedTxnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalOrderedTxnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalOrderedTxnResponseValidationError{}
