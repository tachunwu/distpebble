// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distpebblev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SequencerServiceClient is the client API for SequencerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerServiceClient interface {
	// Entry point
	CreateTxn(ctx context.Context, in *CreateTxnRequest, opts ...grpc.CallOption) (*CreateTxnResponse, error)
	// Sequencer interal use
	GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error)
}

type sequencerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerServiceClient(cc grpc.ClientConnInterface) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) CreateTxn(ctx context.Context, in *CreateTxnRequest, opts ...grpc.CallOption) (*CreateTxnResponse, error) {
	out := new(CreateTxnResponse)
	err := c.cc.Invoke(ctx, "/distpebble.v1.SequencerService/CreateTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error) {
	out := new(GetBatchResponse)
	err := c.cc.Invoke(ctx, "/distpebble.v1.SequencerService/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerServiceServer is the server API for SequencerService service.
// All implementations must embed UnimplementedSequencerServiceServer
// for forward compatibility
type SequencerServiceServer interface {
	// Entry point
	CreateTxn(context.Context, *CreateTxnRequest) (*CreateTxnResponse, error)
	// Sequencer interal use
	GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error)
	mustEmbedUnimplementedSequencerServiceServer()
}

// UnimplementedSequencerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequencerServiceServer struct {
}

func (UnimplementedSequencerServiceServer) CreateTxn(context.Context, *CreateTxnRequest) (*CreateTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTxn not implemented")
}
func (UnimplementedSequencerServiceServer) GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedSequencerServiceServer) mustEmbedUnimplementedSequencerServiceServer() {}

// UnsafeSequencerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerServiceServer will
// result in compilation errors.
type UnsafeSequencerServiceServer interface {
	mustEmbedUnimplementedSequencerServiceServer()
}

func RegisterSequencerServiceServer(s grpc.ServiceRegistrar, srv SequencerServiceServer) {
	s.RegisterService(&SequencerService_ServiceDesc, srv)
}

func _SequencerService_CreateTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).CreateTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distpebble.v1.SequencerService/CreateTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).CreateTxn(ctx, req.(*CreateTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distpebble.v1.SequencerService/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetBatch(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerService_ServiceDesc is the grpc.ServiceDesc for SequencerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distpebble.v1.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTxn",
			Handler:    _SequencerService_CreateTxn_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _SequencerService_GetBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distpebble/v1/seq.proto",
}
